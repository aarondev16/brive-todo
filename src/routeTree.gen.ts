/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AppInboxRouteImport } from './routes/app/inbox'
import { Route as AppProjectIdRouteImport } from './routes/app/project/$id'

const AuthSignupLazyRouteImport = createFileRoute('/auth/signup')()
const AppUpcomingLazyRouteImport = createFileRoute('/app/upcoming')()
const AppTodayLazyRouteImport = createFileRoute('/app/today')()

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthSignupLazyRoute = AuthSignupLazyRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/signup.lazy').then((d) => d.Route))
const AppUpcomingLazyRoute = AppUpcomingLazyRouteImport.update({
  id: '/upcoming',
  path: '/upcoming',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() => import('./routes/app/upcoming.lazy').then((d) => d.Route))
const AppTodayLazyRoute = AppTodayLazyRouteImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() => import('./routes/app/today.lazy').then((d) => d.Route))
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppInboxRoute = AppInboxRouteImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppProjectIdRoute = AppProjectIdRouteImport.update({
  id: '/project/$id',
  path: '/project/$id',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/app/inbox': typeof AppInboxRoute
  '/auth/login': typeof AuthLoginRoute
  '/app/today': typeof AppTodayLazyRoute
  '/app/upcoming': typeof AppUpcomingLazyRoute
  '/auth/signup': typeof AuthSignupLazyRoute
  '/app/': typeof AppIndexRoute
  '/app/project/$id': typeof AppProjectIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/app/inbox': typeof AppInboxRoute
  '/auth/login': typeof AuthLoginRoute
  '/app/today': typeof AppTodayLazyRoute
  '/app/upcoming': typeof AppUpcomingLazyRoute
  '/auth/signup': typeof AuthSignupLazyRoute
  '/app': typeof AppIndexRoute
  '/app/project/$id': typeof AppProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/app/inbox': typeof AppInboxRoute
  '/auth/login': typeof AuthLoginRoute
  '/app/today': typeof AppTodayLazyRoute
  '/app/upcoming': typeof AppUpcomingLazyRoute
  '/auth/signup': typeof AuthSignupLazyRoute
  '/app/': typeof AppIndexRoute
  '/app/project/$id': typeof AppProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/auth'
    | '/app/inbox'
    | '/auth/login'
    | '/app/today'
    | '/app/upcoming'
    | '/auth/signup'
    | '/app/'
    | '/app/project/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/app/inbox'
    | '/auth/login'
    | '/app/today'
    | '/app/upcoming'
    | '/auth/signup'
    | '/app'
    | '/app/project/$id'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/auth'
    | '/app/inbox'
    | '/auth/login'
    | '/app/today'
    | '/app/upcoming'
    | '/auth/signup'
    | '/app/'
    | '/app/project/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/app/upcoming': {
      id: '/app/upcoming'
      path: '/upcoming'
      fullPath: '/app/upcoming'
      preLoaderRoute: typeof AppUpcomingLazyRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/today': {
      id: '/app/today'
      path: '/today'
      fullPath: '/app/today'
      preLoaderRoute: typeof AppTodayLazyRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/app/inbox': {
      id: '/app/inbox'
      path: '/inbox'
      fullPath: '/app/inbox'
      preLoaderRoute: typeof AppInboxRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/project/$id': {
      id: '/app/project/$id'
      path: '/project/$id'
      fullPath: '/app/project/$id'
      preLoaderRoute: typeof AppProjectIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppInboxRoute: typeof AppInboxRoute
  AppTodayLazyRoute: typeof AppTodayLazyRoute
  AppUpcomingLazyRoute: typeof AppUpcomingLazyRoute
  AppIndexRoute: typeof AppIndexRoute
  AppProjectIdRoute: typeof AppProjectIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppInboxRoute: AppInboxRoute,
  AppTodayLazyRoute: AppTodayLazyRoute,
  AppUpcomingLazyRoute: AppUpcomingLazyRoute,
  AppIndexRoute: AppIndexRoute,
  AppProjectIdRoute: AppProjectIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupLazyRoute: typeof AuthSignupLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupLazyRoute: AuthSignupLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
